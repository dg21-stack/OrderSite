{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport styles from \"./Loginsignup.module.css\";\nimport { Fragment, useContext, useState } from \"react\";\nimport Link from 'next/link';\nimport { useRef } from \"react\";\nimport AuthContext from \"../store/use-context\";\nimport { useRouter } from \"next/router\";\n\nconst LoginSignup = () => {\n  const emailRef = useRef();\n  const passRef = useRef();\n  const router = useRouter();\n  const authCtx = useContext(AuthContext);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: properEmail,\n    1: setProperEmail\n  } = useState(true);\n  const {\n    0: properPass,\n    1: setProperPassword\n  } = useState(true);\n\n  if (authCtx.isLoggedIn) {\n    return /*#__PURE__*/_jsx(Link, {\n      href: \"/AllRestaurants\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: styles.signup,\n        children: /*#__PURE__*/_jsx(\"b\", {\n          children: \"Already Logged in! Start Browsing Here. \"\n        })\n      })\n    });\n  }\n\n  const loginHandler = event => {\n    var _emailRef$current, _passRef$current;\n\n    setIsLoading(true);\n    const currEmail = (_emailRef$current = emailRef.current) === null || _emailRef$current === void 0 ? void 0 : _emailRef$current.value;\n    const currPass = (_passRef$current = passRef.current) === null || _passRef$current === void 0 ? void 0 : _passRef$current.value;\n    event.preventDefault();\n    fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDRIvxAwx8KqrhXOQpIzkSave61memF2Uw', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: currEmail,\n        password: currPass,\n        returnSecureToken: true\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then().then(res => {\n      setIsLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = 'Auth failed';\n\n          if (data && data.error && data.error.message) {\n            errorMessage = data.error.message;\n\n            if (data.error.message === 'INVALID_EMAIL') {\n              setProperEmail(false);\n            } else {\n              setProperPassword(false);\n            }\n          }\n\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      fetch('https://reactfirst-48147-default-rtdb.firebaseio.com/user.json').then().then(r => {\n        if (r.ok) {\n          return r.json();\n        } else {\n          return r.json().then(d => {\n            let errorMessage = 'Auth failed';\n\n            if (d && d.error && d.error.message) {\n              errorMessage = data.error.message;\n            }\n\n            throw new Error(errorMessage);\n          });\n        }\n      }).then(da => {\n        let currfirstName = '';\n        let isBusiness = false;\n        let number = 0;\n        console.log(JSON.stringify(da));\n\n        for (let value of da) {\n          console.log(value);\n\n          for (let values in value) {\n            var _value$values;\n\n            console.log(value[values]);\n\n            if (((_value$values = value[values]) === null || _value$values === void 0 ? void 0 : _value$values['email'].toLowerCase()) === currEmail.toLowerCase()) {\n              if (number == 1) {\n                isBusiness = true;\n                authCtx.login(currEmail, value[values]['businessName'], value[values]['address'], true);\n                break;\n              } else {\n                authCtx.login(currEmail, value[values]['firstName'], value[values]['lastName'], false);\n                break;\n              }\n            }\n          }\n\n          number += 1;\n        }\n\n        if (isBusiness) {\n          router.push('/business');\n        } else {\n          router.push('/AllRestaurants');\n        }\n      });\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.loginContainer,\n      children: [/*#__PURE__*/_jsx(\"label\", {\n        htmlFor: \"Email\",\n        children: \" Email\"\n      }), /*#__PURE__*/_jsx(\"input\", {\n        placeholder: \"email@email.com\",\n        onInput: () => {\n          if (!properEmail) {\n            setProperEmail(true);\n          }\n        },\n        ref: emailRef,\n        type: \"email\",\n        name: \"Email\",\n        className: `${styles.login} ${properEmail ? '' : styles.flagged}`\n      }), /*#__PURE__*/_jsx(\"label\", {\n        htmlFor: \"Password\",\n        children: \"Password\"\n      }), /*#__PURE__*/_jsx(\"input\", {\n        placeholder: \"xxxxxx\",\n        onInput: () => {\n          if (!properPass) {\n            setProperPassword(true);\n          }\n        },\n        ref: passRef,\n        name: \"Password\",\n        type: \"password\",\n        className: `${styles.login} ${properPass && properEmail ? '' : styles.flagged}`\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.buttonContainer,\n      children: /*#__PURE__*/_jsx(\"button\", {\n        onClick: loginHandler,\n        className: ` ${properEmail && properPass ? styles.btnClass : styles.errBtn}`,\n        children: \" Login\"\n      })\n    }), /*#__PURE__*/_jsx(Link, {\n      href: \"/signup\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: styles.signup,\n        children: \"Don't Have an Account? Sign Up Here!\"\n      })\n    })]\n  });\n};\n\nexport default LoginSignup;","map":null,"metadata":{},"sourceType":"module"}