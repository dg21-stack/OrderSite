{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\dgaidar\\\\Documents\\\\VScode\\\\React\\\\FoodOrderingSite\\\\pages\\\\AllRestaurants\\\\index.js\";\nimport AuthContext from \"../../components/store/use-context\";\nimport { Fragment, useContext, useEffect } from \"react\";\nimport Router from \"next/router\";\nimport router from \"next/router\";\nimport Restaurant from \"../../components/RestaurantList/Restaurant\";\n\nconst AllRestaurants = props => {\n  const authCtx = useContext(AuthContext);\n  useEffect(() => {\n    if (!authCtx.isLoggedIn) {\n      Router.push('/');\n    }\n  }, [authCtx.isLoggedIn]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [\"hello\", DUMMY_RESTAURANTS.map(res => {\n      console.log(res);\n\n      /*#__PURE__*/\n      _jsxDEV(Restaurant, {\n        id: props.res.id,\n        name: props.res.name,\n        address: props.res.address,\n        image: props.res.image,\n        description: props.res.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 12\n  }, this);\n};\n\nexport async function getStaticProps() {\n  const client = await MongoClient.connect('mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority');\n  const db = client.db();\n  const resCollection = db.collection('ResList');\n  const res = await resCollection.find().toArray();\n  return {\n    props: {\n      res: res.map(r => ({\n        name: r.name,\n        address: r.address,\n        image: r.image,\n        id: r._id.toString(),\n        description: r.description\n      }))\n    },\n    revalidate: 10\n  };\n} // export async function getStaticPaths() {\n//     const client = await MongoClient.connect(\n//       'mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority'  );\n//     const db = client.db();\n//     const resCollection = db.collection('ResList');\n//     const res = await resCollection.find({}, { _id: 1 }).toArray();\n//     client.close();\n//     return {\n//       fallback: \"blocking\",\n//       paths: res.map((r) => ({\n//         params: { resId: r._id.toString() },\n//       })),\n//     };\n//   }\n//   export async function getStaticProps(context) {\n//     // fetch data for a single meetup\n//     const meetupId = context.params.meetupId;\n//     const client = await MongoClient.connect(\n//       'mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority'  );\n//     const db = client.db();\n//     const res = db.collection('ResList');\n//     const selectedRes = await res.findOne({\n//       _id: ObjectId(resId),\n//     });\n//     client.close();\n//     return {\n//       props: {\n//         meetupData: {\n//           id: selectedRes._id.toString(),\n//           image: selectedRes.image,\n//           address: selectedRes.address,\n//           image: selectedRes.image,\n//           name: selectedRes.name,\n//           description: selectedRes.description,\n//         },\n//       },\n//     };\n//   }\n\nexport default AllRestaurants; // {\"_id\":{\"$oid\":\"62e140c486bacfeb016c3ec5\"},\"image\":\"\",\"address\":\"4 temporary way\",\"description\":\"this is a dummy business\",\"name\":\"temp business 2\"}''","map":{"version":3,"sources":["C:/Users/dgaidar/Documents/VScode/React/FoodOrderingSite/pages/AllRestaurants/index.js"],"names":["AuthContext","Fragment","useContext","useEffect","Router","router","Restaurant","AllRestaurants","props","authCtx","isLoggedIn","push","DUMMY_RESTAURANTS","map","res","console","log","id","name","address","image","description","getStaticProps","client","MongoClient","connect","db","resCollection","collection","find","toArray","r","_id","toString","revalidate"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,oCAAxB;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,UAAP,MAAuB,4CAAvB;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAE9B,QAAMC,OAAO,GAAGP,UAAU,CAACF,WAAD,CAA1B;AACAG,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACM,OAAO,CAACC,UAAb,EAAwB;AACpBN,MAAAA,MAAM,CAACO,IAAP,CAAY,GAAZ;AACH;AACJ,GAJQ,EAIP,CAACF,OAAO,CAACC,UAAT,CAJO,CAAT;AAKA,sBAAO,QAAC,QAAD;AAAA,wBAEFE,iBAAiB,CAACC,GAAlB,CAAuBC,GAAD,IAAS;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA;AAAA,cAAC,UAAD;AACA,QAAA,EAAE,EAAIN,KAAK,CAACM,GAAN,CAAUG,EADhB;AAEA,QAAA,IAAI,EAAIT,KAAK,CAACM,GAAN,CAAUI,IAFlB;AAGA,QAAA,OAAO,EAAIV,KAAK,CAACM,GAAN,CAAUK,OAHrB;AAIA,QAAA,KAAK,EAAIX,KAAK,CAACM,GAAN,CAAUM,KAJnB;AAKA,QAAA,WAAW,EAAIZ,KAAK,CAACM,GAAN,CAAUO;AALzB;AAAA;AAAA;AAAA;AAAA;AAOC,KATA,CAFE;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAaH,CArBD;;AAsBA,OAAO,eAAeC,cAAf,GAAgC;AAEnC,QAAMC,MAAM,GAAG,MAAMC,WAAW,CAACC,OAAZ,CAAoB,+GAApB,CAArB;AAEA,QAAMC,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX;AACA,QAAMC,aAAa,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAtB;AAEA,QAAMd,GAAG,GAAG,MAAMa,aAAa,CAACE,IAAd,GAAqBC,OAArB,EAAlB;AAEA,SAAO;AACHtB,IAAAA,KAAK,EAAE;AACHM,MAAAA,GAAG,EAAEA,GAAG,CAACD,GAAJ,CAAQkB,CAAC,KAAK;AACfb,QAAAA,IAAI,EAAEa,CAAC,CAACb,IADO;AAEfC,QAAAA,OAAO,EAAEY,CAAC,CAACZ,OAFI;AAGfC,QAAAA,KAAK,EAAEW,CAAC,CAACX,KAHM;AAIfH,QAAAA,EAAE,EAAEc,CAAC,CAACC,GAAF,CAAMC,QAAN,EAJW;AAKfZ,QAAAA,WAAW,EAAEU,CAAC,CAACV;AALA,OAAL,CAAT;AADF,KADJ;AAUHa,IAAAA,UAAU,EAAE;AAVT,GAAP;AAYH,C,CAED;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe3B,cAAf,C,CAEA","sourcesContent":["import AuthContext from \"../../components/store/use-context\";\r\nimport { Fragment, useContext, useEffect } from \"react\";\r\nimport Router from \"next/router\";\r\nimport router from \"next/router\";\r\nimport Restaurant from \"../../components/RestaurantList/Restaurant\";\r\n\r\nconst AllRestaurants = (props) => {\r\n    \r\n    const authCtx = useContext(AuthContext);\r\n    useEffect(() => {\r\n        if (!authCtx.isLoggedIn){\r\n            Router.push('/')\r\n        }\r\n    },[authCtx.isLoggedIn])\r\n    return <Fragment>\r\n        hello\r\n        {DUMMY_RESTAURANTS.map((res) => {\r\n        console.log(res);\r\n        <Restaurant \r\n        id = {props.res.id}\r\n        name = {props.res.name}\r\n        address = {props.res.address} \r\n        image = {props.res.image} \r\n        description = {props.res.description}\r\n        />\r\n        })}\r\n        </Fragment>\r\n}\r\nexport async function getStaticProps() {\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority');\r\n    \r\n    const db = client.db();\r\n    const resCollection = db.collection('ResList');\r\n\r\n    const res = await resCollection.find().toArray();\r\n\r\n    return {\r\n        props: {\r\n            res: res.map(r => ({\r\n                name: r.name,\r\n                address: r.address,\r\n                image: r.image,\r\n                id: r._id.toString(),\r\n                description: r.description\r\n            }))\r\n        },\r\n        revalidate: 10\r\n    };\r\n}\r\n\r\n// export async function getStaticPaths() {\r\n//     const client = await MongoClient.connect(\r\n//       'mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority'  );\r\n//     const db = client.db();\r\n  \r\n//     const resCollection = db.collection('ResList');\r\n  \r\n//     const res = await resCollection.find({}, { _id: 1 }).toArray();\r\n  \r\n//     client.close();\r\n  \r\n//     return {\r\n//       fallback: \"blocking\",\r\n//       paths: res.map((r) => ({\r\n//         params: { resId: r._id.toString() },\r\n//       })),\r\n//     };\r\n//   }\r\n  \r\n//   export async function getStaticProps(context) {\r\n//     // fetch data for a single meetup\r\n  \r\n//     const meetupId = context.params.meetupId;\r\n  \r\n//     const client = await MongoClient.connect(\r\n//       'mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority'  );\r\n//     const db = client.db();\r\n  \r\n//     const res = db.collection('ResList');\r\n  \r\n//     const selectedRes = await res.findOne({\r\n//       _id: ObjectId(resId),\r\n//     });\r\n  \r\n//     client.close();\r\n  \r\n//     return {\r\n//       props: {\r\n//         meetupData: {\r\n//           id: selectedRes._id.toString(),\r\n//           image: selectedRes.image,\r\n//           address: selectedRes.address,\r\n//           image: selectedRes.image,\r\n//           name: selectedRes.name,\r\n//           description: selectedRes.description,\r\n//         },\r\n//       },\r\n//     };\r\n//   }\r\nexport default AllRestaurants;\r\n\r\n// {\"_id\":{\"$oid\":\"62e140c486bacfeb016c3ec5\"},\"image\":\"\",\"address\":\"4 temporary way\",\"description\":\"this is a dummy business\",\"name\":\"temp business 2\"}''"]},"metadata":{},"sourceType":"module"}