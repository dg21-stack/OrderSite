{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\dgaidar\\\\Documents\\\\VScode\\\\React\\\\FoodOrderingSite\\\\components\\\\store\\\\use-context.js\";\nimport React, { useEffect, useState } from \"react\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: '',\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\nexport const AuthContextProvider = props => {\n  let initialToken;\n\n  if (false) {\n    console.log('You are on the browser', window); // 👉️ can use localStorage here\n  } else {\n    console.log('You are on the server');\n  }\n\n  useEffect(() => {\n    const tokenData = localStorage.getItem('token');\n    console.log(tokenData);\n  }, []);\n  const {\n    0: token,\n    1: setToken\n  } = useState(initialToken);\n  const userIsLoggedIn = !!token;\n\n  const loginHandler = token => {\n    setToken(token);\n    localStorage.setItem('token', token);\n  };\n\n  const logoutHandler = token => {\n    setToken(null);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n};\nexport default AuthContext;","map":{"version":3,"sources":["C:/Users/dgaidar/Documents/VScode/React/FoodOrderingSite/components/store/use-context.js"],"names":["React","useEffect","useState","AuthContext","createContext","token","isLoggedIn","login","logout","AuthContextProvider","props","initialToken","console","log","window","tokenData","localStorage","getItem","setToken","userIsLoggedIn","loginHandler","setItem","logoutHandler","contextValue","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACpCC,EAAAA,KAAK,EAAE,EAD6B;AAEpCC,EAAAA,UAAU,EAAE,KAFwB;AAGpCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHgB;AAIpCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJoB,CAApB,CAApB;AAQA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAC1C,MAAIC,YAAJ;;AACA,aAAmC;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,MAAtC,EAD+B,CAE/B;AACD,GAHH,MAGS;AACLF,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;;AACHZ,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMc,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ;AAEH,GALQ,EAKN,EALM,CAAT;AAQA,QAAM;AAAA,OAACV,KAAD;AAAA,OAAQa;AAAR,MAAoBhB,QAAQ,CAACS,YAAD,CAAlC;AAEA,QAAMQ,cAAc,GAAG,CAAC,CAACd,KAAzB;;AAEA,QAAMe,YAAY,GAAIf,KAAD,IAAW;AAC5Ba,IAAAA,QAAQ,CAACb,KAAD,CAAR;AACAW,IAAAA,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA6BhB,KAA7B;AACH,GAHD;;AAIA,QAAMiB,aAAa,GAAIjB,KAAD,IAAW;AAC7Ba,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAGA,QAAMK,YAAY,GAAG;AACjBlB,IAAAA,KAAK,EAAEA,KADU;AAEjBC,IAAAA,UAAU,EAAEa,cAFK;AAGjBZ,IAAAA,KAAK,EAAEa,YAHU;AAIjBZ,IAAAA,MAAM,EAAEc;AAJS,GAArB;AAMA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAIC,YAA/B;AAAA,cACFb,KAAK,CAACc;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CApCM;AAqCP,eAAerB,WAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n    token: '',\r\n    isLoggedIn: false,\r\n    login: (token) => {},\r\n    logout: () => {}\r\n});\r\n\r\n\r\nexport const AuthContextProvider = (props) => {\r\n    let initialToken;\r\n    if (typeof window !== 'undefined') {\r\n        console.log('You are on the browser', window)\r\n        // 👉️ can use localStorage here\r\n      } else {\r\n        console.log('You are on the server')\r\n      }\r\n    useEffect(() => {\r\n      \r\n        const tokenData = localStorage.getItem('token');\r\n        console.log(tokenData);\r\n\r\n    }, [])\r\n\r\n \r\n    const [token ,setToken] = useState(initialToken);\r\n\r\n    const userIsLoggedIn = !!token;\r\n\r\n    const loginHandler = (token) => {\r\n        setToken(token);\r\n        localStorage.setItem('token',token);\r\n    };\r\n    const logoutHandler = (token) => {\r\n        setToken(null);\r\n    }\r\n    const contextValue = {\r\n        token: token,\r\n        isLoggedIn: userIsLoggedIn,\r\n        login: loginHandler,\r\n        logout: logoutHandler\r\n    };\r\n    return <AuthContext.Provider value = {contextValue}>\r\n        {props.children}\r\n    </AuthContext.Provider>\r\n}\r\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}