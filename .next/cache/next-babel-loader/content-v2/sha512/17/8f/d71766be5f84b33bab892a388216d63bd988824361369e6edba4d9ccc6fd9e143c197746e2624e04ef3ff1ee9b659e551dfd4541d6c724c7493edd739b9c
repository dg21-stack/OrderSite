{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\dgaidar\\\\Documents\\\\VScode\\\\React\\\\FoodOrderingSite\\\\pages\\\\AllRestaurants\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport AuthContext from \"../../components/store/use-context\";\nimport { Fragment, useContext, useEffect } from \"react\";\nimport Router from \"next/router\";\nimport router from \"next/router\";\nimport Restaurant from \"../../components/RestaurantList/Restaurant\";\nimport ModalCart from \"../../components/Cart/ModalCart\";\nimport Card from \"../../components/Card/Card\";\n\nvar AllRestaurants = function AllRestaurants(props) {\n  _s();\n\n  console.log(props);\n  var authCtx = useContext(AuthContext);\n  useEffect(function () {\n    if (!authCtx.isLoggedIn) {\n      Router.push('/');\n    }\n  }, [authCtx.isLoggedIn]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: authCtx.user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, _this), authCtx.isOpen && /*#__PURE__*/_jsxDEV(ModalCart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 28\n    }, _this), /*#__PURE__*/_jsxDEV(Restaurant, {\n      res: props.res\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 12\n  }, _this);\n};\n\n_s(AllRestaurants, \"eRLstrTM65m013T5AxnHkBw3wAM=\");\n\n_c = AllRestaurants;\n// export async function getStaticPaths() {\n//     const client = await MongoClient.connect(\n//       'mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority'  );\n//     const db = client.db();\n//     const resCollection = db.collection('ResList');\n//     const res = await resCollection.find({}, { _id: 1 }).toArray();\n//     client.close();\n//     return {\n//       fallback: \"blocking\",\n//       paths: res.map((r) => ({\n//         params: { resId: r._id.toString() },\n//       })),\n//     };\n//   }\n//   export async function getStaticProps(context) {\n//     // fetch data for a single meetup\n//     const meetupId = context.params.meetupId;\n//     const client = await MongoClient.connect(\n//       'mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority'  );\n//     const db = client.db();\n//     const res = db.collection('ResList');\n//     const selectedRes = await res.findOne({\n//       _id: ObjectId(resId),\n//     });\n//     client.close();\n//     return {\n//       props: {\n//         meetupData: {\n//           id: selectedRes._id.toString(),\n//           image: selectedRes.image,\n//           address: selectedRes.address,\n//           image: selectedRes.image,\n//           name: selectedRes.name,\n//           description: selectedRes.description,\n//         },\n//       },\n//     };\n//   }\nexport var __N_SSG = true;\nexport default AllRestaurants; // {\"_id\":{\"$oid\":\"62e140c486bacfeb016c3ec5\"},\"image\":\"\",\"address\":\"4 temporary way\",\"description\":\"this is a dummy business\",\"name\":\"temp business 2\"}''\n\nvar _c;\n\n$RefreshReg$(_c, \"AllRestaurants\");","map":{"version":3,"sources":["C:/Users/dgaidar/Documents/VScode/React/FoodOrderingSite/pages/AllRestaurants/index.js"],"names":["AuthContext","Fragment","useContext","useEffect","Router","router","Restaurant","ModalCart","Card","AllRestaurants","props","console","log","authCtx","isLoggedIn","push","user","isOpen","res"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,oCAAxB;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,UAAP,MAAuB,4CAAvB;AAEA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AAAA;;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,MAAMG,OAAO,GAAGX,UAAU,CAACF,WAAD,CAA1B;AACAG,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACU,OAAO,CAACC,UAAb,EAAwB;AACpBV,MAAAA,MAAM,CAACW,IAAP,CAAY,GAAZ;AACH;AACJ,GAJQ,EAIP,CAACF,OAAO,CAACC,UAAT,CAJO,CAAT;AAKA,sBAAO,QAAC,QAAD;AAAA,4BACH,QAAC,IAAD;AAAA,gBAAOD,OAAO,CAACG;AAAf;AAAA;AAAA;AAAA;AAAA,aADG,EAEFH,OAAO,CAACI,MAAR,iBAAkB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,aAFhB,eAGH,QAAC,UAAD;AACA,MAAA,GAAG,EAAIP,KAAK,CAACQ;AADb;AAAA;AAAA;AAAA;AAAA,aAHG;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAOH,CAfD;;GAAMT,c;;KAAAA,c;AA2CN;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeA,cAAf,C,CAEA","sourcesContent":["import AuthContext from \"../../components/store/use-context\";\r\nimport { Fragment, useContext, useEffect } from \"react\";\r\nimport Router from \"next/router\";\r\nimport router from \"next/router\";\r\nimport Restaurant from \"../../components/RestaurantList/Restaurant\";\r\nimport { MongoClient } from \"mongodb\";\r\nimport ModalCart from \"../../components/Cart/ModalCart\";\r\nimport Card from \"../../components/Card/Card\";\r\n\r\nconst AllRestaurants = (props) => {\r\n    console.log(props);\r\n    const authCtx = useContext(AuthContext);\r\n    useEffect(() => {\r\n        if (!authCtx.isLoggedIn){\r\n            Router.push('/')\r\n        }\r\n    },[authCtx.isLoggedIn])\r\n    return <Fragment>\r\n        <Card>{authCtx.user}</Card>\r\n        {authCtx.isOpen && <ModalCart/>}\r\n        <Restaurant \r\n        res = {props.res}\r\n        />\r\n        </Fragment>\r\n}\r\n\r\nexport async function getStaticProps() {\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority');\r\n    \r\n    const db = client.db();\r\n    \r\n    const resCollection = db.collection('ResList');\r\n\r\n    const res = await resCollection.find().toArray();\r\n    console.log(res);\r\n    client.close();\r\n    return {\r\n        props: {\r\n            res: res.map(r => ({\r\n                name: r.name,\r\n                address: r.address,\r\n                image: r.image,\r\n                id: r._id.toString(),\r\n                description: r.description,\r\n                menu: r.menu\r\n            }))\r\n        },\r\n        revalidate: 10\r\n    };\r\n}\r\n\r\n// export async function getStaticPaths() {\r\n//     const client = await MongoClient.connect(\r\n//       'mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority'  );\r\n//     const db = client.db();\r\n  \r\n//     const resCollection = db.collection('ResList');\r\n  \r\n//     const res = await resCollection.find({}, { _id: 1 }).toArray();\r\n  \r\n//     client.close();\r\n  \r\n//     return {\r\n//       fallback: \"blocking\",\r\n//       paths: res.map((r) => ({\r\n//         params: { resId: r._id.toString() },\r\n//       })),\r\n//     };\r\n//   }\r\n  \r\n//   export async function getStaticProps(context) {\r\n//     // fetch data for a single meetup\r\n  \r\n//     const meetupId = context.params.meetupId;\r\n  \r\n//     const client = await MongoClient.connect(\r\n//       'mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority'  );\r\n//     const db = client.db();\r\n  \r\n//     const res = db.collection('ResList');\r\n  \r\n//     const selectedRes = await res.findOne({\r\n//       _id: ObjectId(resId),\r\n//     });\r\n  \r\n//     client.close();\r\n  \r\n//     return {\r\n//       props: {\r\n//         meetupData: {\r\n//           id: selectedRes._id.toString(),\r\n//           image: selectedRes.image,\r\n//           address: selectedRes.address,\r\n//           image: selectedRes.image,\r\n//           name: selectedRes.name,\r\n//           description: selectedRes.description,\r\n//         },\r\n//       },\r\n//     };\r\n//   }\r\nexport default AllRestaurants;\r\n\r\n// {\"_id\":{\"$oid\":\"62e140c486bacfeb016c3ec5\"},\"image\":\"\",\"address\":\"4 temporary way\",\"description\":\"this is a dummy business\",\"name\":\"temp business 2\"}''"]},"metadata":{},"sourceType":"module"}