{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\dgaidar\\\\Documents\\\\VScode\\\\React\\\\FoodOrderingSite\\\\pages\\\\AllRestaurants\\\\[businessId]\\\\index.js\";\nimport DetailCard from \"../../../components/Card/DetailCard\";\nimport { useContext, useSearchParams } from \"react\";\nimport AuthContext from \"../../../components/store/use-context\";\nimport Image from \"../../../components/Details/image\";\nimport Details from '../../../components/Details/Details';\nimport Menu from \"../../../components/Details/Menu\";\nimport ItemCard from \"../../../components/Card/ItemCard\";\nimport ModalCart from \"../../../components/Cart/ModalCart\";\nimport ReviewPage from \"../../../components/Details/ReviewPage\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst businessDetails = props => {\n  var _props$restaurant, _props$restaurant2, _props$restaurant3, _props$restaurant4, _props$restaurant5;\n\n  const [pageNum, setPageNum] = useState(1);\n  const [totalNum, setTotalNum] = useState(null);\n\n  async function getter(enteredItemData) {\n    const response = await fetch(`../api/getHandler?pageIndex=${enteredItemData}&pageSize=1`, {\n      method: 'GET'\n    });\n    const data = await response.json();\n    console.log(data);\n\n    if (!totalNum) {\n      setTotalNum(parseInt(data.totalRecords[0].body));\n    }\n  }\n\n  const setter = () => {\n    setPageNum(prevVal => {\n      prevVal++;\n      getter(prevVal);\n      return prevVal;\n    });\n  };\n\n  async function addReviewHandler(enteredItemData) {\n    const response = await fetch('../api/ReviewHandler', {\n      method: 'POST',\n      body: JSON.stringify({\n        subject: enteredItemData.subject,\n        body: enteredItemData.body,\n        date: enteredItemData.date,\n        stars: enteredItemData.stars,\n        restaurant: props.restaurant.id,\n        user: authCtx.user\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n  }\n\n  const authCtx = useContext(AuthContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginLeft: '8vw',\n      marginRight: '8vw',\n      marginBottom: '10vw'\n    },\n    children: [/*#__PURE__*/_jsxDEV(DetailCard, {\n      children: /*#__PURE__*/_jsxDEV(Image, {\n        image: (_props$restaurant = props.restaurant) === null || _props$restaurant === void 0 ? void 0 : _props$restaurant.image,\n        details: (_props$restaurant2 = props.restaurant) === null || _props$restaurant2 === void 0 ? void 0 : _props$restaurant2.name,\n        subtitle: (_props$restaurant3 = props.restaurant) === null || _props$restaurant3 === void 0 ? void 0 : _props$restaurant3.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DetailCard, {\n      children: /*#__PURE__*/_jsxDEV(Details, {\n        description: (_props$restaurant4 = props.restaurant) === null || _props$restaurant4 === void 0 ? void 0 : _props$restaurant4.paragraph\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ItemCard, {\n      children: /*#__PURE__*/_jsxDEV(Menu, {\n        menu: (_props$restaurant5 = props.restaurant) === null || _props$restaurant5 === void 0 ? void 0 : _props$restaurant5.menu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ItemCard, {\n      children: /*#__PURE__*/_jsxDEV(ReviewPage, {\n        addReviewHandler: addReviewHandler,\n        reviewList: props.reviews\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DetailCard, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setter,\n        children: \"clicker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), authCtx.isOpen && /*#__PURE__*/_jsxDEV(ModalCart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 12\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('reviewList');\n  console.log(meetupsCollection);\n  const meetups = await meetupsCollection.find({}, {\n    restaurant: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: \"blocking\",\n    paths: meetups.map(meetup => ({\n      params: {\n        businessId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params.businessId;\n  console.log('meetupId', typeof meetupId);\n  const client = await MongoClient.connect('mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('reviewList');\n  const resCollection = db.collection('ResList');\n  const review = await meetupsCollection.find({\n    restaurant: meetupId\n  }).toArray();\n  const res = await resCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      reviews: review.map(r => ({\n        user: r.user,\n        date: r.date,\n        id: r._id.toString(),\n        body: r.body,\n        subject: r.subject,\n        restaurant: r.restaurant,\n        stars: r.stars\n      })),\n      restaurant: {\n        name: res.name,\n        address: res.address,\n        image: res.image,\n        id: res._id.toString(),\n        description: res.description,\n        menu: res.menu,\n        paragraph: res.paragraph\n      }\n    },\n    revalidate: 10\n  };\n}\nexport default businessDetails;","map":{"version":3,"sources":["C:/Users/dgaidar/Documents/VScode/React/FoodOrderingSite/pages/AllRestaurants/[businessId]/index.js"],"names":["DetailCard","useContext","useSearchParams","AuthContext","Image","Details","Menu","ItemCard","ModalCart","ReviewPage","MongoClient","ObjectId","businessDetails","props","pageNum","setPageNum","useState","totalNum","setTotalNum","getter","enteredItemData","response","fetch","method","data","json","console","log","parseInt","totalRecords","body","setter","prevVal","addReviewHandler","JSON","stringify","subject","date","stars","restaurant","id","user","authCtx","headers","marginLeft","marginRight","marginBottom","image","name","description","paragraph","menu","reviews","isOpen","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","toArray","close","fallback","paths","map","meetup","params","businessId","_id","toString","getStaticProps","context","meetupId","resCollection","review","res","findOne","r","address","revalidate"],"mappings":";;AACA,OAAOA,UAAP,MAAuB,qCAAvB;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,OAA5C;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,KAAP,MAAkB,mCAAlB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAuC,SAAvC;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AAC/B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBC,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BF,QAAQ,CAAC,IAAD,CAAxC;;AACA,iBAAeG,MAAf,CAAsBC,eAAtB,EAAuC;AACnC,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BF,eAAgB,aAAhD,EAC5B;AACIG,MAAAA,MAAM,EAAE;AADZ,KAD4B,CAA5B;AAIA,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AACA,QAAI,CAACP,QAAL,EAAc;AACVC,MAAAA,WAAW,CAACU,QAAQ,CAACJ,IAAI,CAACK,YAAL,CAAkB,CAAlB,EAAqBC,IAAtB,CAAT,CAAX;AACH;AACJ;;AACD,QAAMC,MAAM,GAAG,MAAM;AACjBhB,IAAAA,UAAU,CAACiB,OAAO,IAAI;AAClBA,MAAAA,OAAO;AACPb,MAAAA,MAAM,CAACa,OAAD,CAAN;AACA,aAAOA,OAAP;AACH,KAJS,CAAV;AAKH,GAND;;AAOA,iBAAeC,gBAAf,CAAgCb,eAAhC,EAAiD;AAC7C,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sBAAD,EAAyB;AACnDC,MAAAA,MAAM,EAAE,MAD2C;AAEnDO,MAAAA,IAAI,EAAEI,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,OAAO,EAAEhB,eAAe,CAACgB,OADN;AAEnBN,QAAAA,IAAI,EAAEV,eAAe,CAACU,IAFH;AAGnBO,QAAAA,IAAI,EAAEjB,eAAe,CAACiB,IAHH;AAInBC,QAAAA,KAAK,EAAElB,eAAe,CAACkB,KAJJ;AAKnBC,QAAAA,UAAU,EAAE1B,KAAK,CAAC0B,UAAN,CAAiBC,EALV;AAMnBC,QAAAA,IAAI,EAAEC,OAAO,CAACD;AANK,OAAf,CAF6C;AAUnDE,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAV0C,KAAzB,CAA5B;AAeA,UAAMnB,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AAEH;;AACD,QAAMiB,OAAO,GAAGzC,UAAU,CAACE,WAAD,CAA1B;AAGA,sBAAO;AAAK,IAAA,KAAK,EAAI;AAACyC,MAAAA,UAAU,EAAE,KAAb;AAAoBC,MAAAA,WAAW,EAAE,KAAjC;AAAwCC,MAAAA,YAAY,EAAE;AAAtD,KAAd;AAAA,4BAEH,QAAC,UAAD;AAAA,6BAAY,QAAC,KAAD;AAAO,QAAA,KAAK,uBAAIjC,KAAK,CAAC0B,UAAV,sDAAI,kBAAkBQ,KAAlC;AAAyC,QAAA,OAAO,wBAAIlC,KAAK,CAAC0B,UAAV,uDAAI,mBAAkBS,IAAtE;AAA4E,QAAA,QAAQ,wBAAInC,KAAK,CAAC0B,UAAV,uDAAI,mBAAkBU;AAA1G;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA,YAFG,eAGH,QAAC,UAAD;AAAA,6BAAY,QAAC,OAAD;AAAS,QAAA,WAAW,wBAAIpC,KAAK,CAAC0B,UAAV,uDAAI,mBAAkBW;AAA1C;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA,YAHG,eAIH,QAAC,QAAD;AAAA,6BAAU,QAAC,IAAD;AAAM,QAAA,IAAI,wBAAIrC,KAAK,CAAC0B,UAAV,uDAAI,mBAAkBY;AAAhC;AAAA;AAAA;AAAA;AAAA;AAAV;AAAA;AAAA;AAAA;AAAA,YAJG,eAKH,QAAC,QAAD;AAAA,6BAAU,QAAC,UAAD;AAAY,QAAA,gBAAgB,EAAIlB,gBAAhC;AAAkD,QAAA,UAAU,EAAIpB,KAAK,CAACuC;AAAtE;AAAA;AAAA;AAAA;AAAA;AAAV;AAAA;AAAA;AAAA;AAAA,YALG,eAMH,QAAC,UAAD;AAAA,6BAAY;AAAQ,QAAA,OAAO,EAAIrB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA,YANG,EAOFW,OAAO,CAACW,MAAR,iBAAkB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAPhB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAUH,CArDD;;AAsDA,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAM7C,WAAW,CAAC8C,OAAZ,CACnB,+GADmB,CAArB;AAEE,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,YAAd,CAA1B;AACAjC,EAAAA,OAAO,CAACC,GAAR,CAAY+B,iBAAZ;AACA,QAAME,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEtB,IAAAA,UAAU,EAAE;AAAd,GAA3B,EAA8CuB,OAA9C,EAAtB;AAEAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,UADL;AAELC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,UAAU,EAAEF,MAAM,CAACG,GAAP,CAAWC,QAAX;AAAd;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AAEA,QAAMC,QAAQ,GAAGD,OAAO,CAACL,MAAR,CAAeC,UAAhC;AACA3C,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuB,OAAO+C,QAA9B;AACA,QAAMnB,MAAM,GAAG,MAAM7C,WAAW,CAAC8C,OAAZ,CACnB,+GADmB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,YAAd,CAA1B;AACA,QAAMgB,aAAa,GAAGlB,EAAE,CAACE,UAAH,CAAc,SAAd,CAAtB;AACA,QAAOiB,MAAM,GAAG,MAAMlB,iBAAiB,CAACG,IAAlB,CAAuB;AAC3CtB,IAAAA,UAAU,EAAEmC;AAD+B,GAAvB,EAEnBZ,OAFmB,EAAtB;AAGA,QAAMe,GAAG,GAAG,MAAMF,aAAa,CAACG,OAAd,CAAsB;AACpCR,IAAAA,GAAG,EAAE3D,QAAQ,CAAC+D,QAAD;AADuB,GAAtB,CAAlB;AAIAnB,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLlD,IAAAA,KAAK,EAAE;AACLuC,MAAAA,OAAO,EAAEwB,MAAM,CAACV,GAAP,CAAWa,CAAC,KAAK;AACtBtC,QAAAA,IAAI,EAAEsC,CAAC,CAACtC,IADc;AAEtBJ,QAAAA,IAAI,EAAE0C,CAAC,CAAC1C,IAFc;AAGtBG,QAAAA,EAAE,EAAEuC,CAAC,CAACT,GAAF,CAAMC,QAAN,EAHkB;AAItBzC,QAAAA,IAAI,EAAEiD,CAAC,CAACjD,IAJc;AAKtBM,QAAAA,OAAO,EAAE2C,CAAC,CAAC3C,OALW;AAMtBG,QAAAA,UAAU,EAAEwC,CAAC,CAACxC,UANQ;AAOtBD,QAAAA,KAAK,EAAEyC,CAAC,CAACzC;AAPa,OAAL,CAAZ,CADJ;AAULC,MAAAA,UAAU,EAAE;AACRS,QAAAA,IAAI,EAAE6B,GAAG,CAAC7B,IADF;AAERgC,QAAAA,OAAO,EAAEH,GAAG,CAACG,OAFL;AAGRjC,QAAAA,KAAK,EAAE8B,GAAG,CAAC9B,KAHH;AAIRP,QAAAA,EAAE,EAAEqC,GAAG,CAACP,GAAJ,CAAQC,QAAR,EAJI;AAKRtB,QAAAA,WAAW,EAAE4B,GAAG,CAAC5B,WALT;AAMRE,QAAAA,IAAI,EAAE0B,GAAG,CAAC1B,IANF;AAORD,QAAAA,SAAS,EAAE2B,GAAG,CAAC3B;AAPP;AAVP,KADF;AAqBL+B,IAAAA,UAAU,EAAE;AArBP,GAAP;AAuBD;AAGH,eAAerE,eAAf","sourcesContent":["\r\nimport DetailCard from \"../../../components/Card/DetailCard\";\r\nimport { useContext, useSearchParams } from \"react\";\r\nimport AuthContext from \"../../../components/store/use-context\";\r\nimport Image from \"../../../components/Details/image\";\r\nimport Details from '../../../components/Details/Details';\r\nimport Menu from \"../../../components/Details/Menu\";\r\nimport ItemCard from \"../../../components/Card/ItemCard\";\r\nimport ModalCart from \"../../../components/Cart/ModalCart\";\r\nimport ReviewPage from \"../../../components/Details/ReviewPage\";\r\nimport { MongoClient, ObjectId, } from \"mongodb\";\r\n\r\nconst businessDetails = (props) => {\r\n    const [pageNum, setPageNum] = useState(1);\r\n    const [totalNum, setTotalNum] = useState(null);\r\n    async function getter(enteredItemData) {\r\n        const response = await fetch(`../api/getHandler?pageIndex=${enteredItemData}&pageSize=1`,\r\n        {\r\n            method: 'GET',\r\n        } );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        if (!totalNum){\r\n            setTotalNum(parseInt(data.totalRecords[0].body));\r\n        }\r\n    }\r\n    const setter = () => {\r\n        setPageNum(prevVal => {\r\n            prevVal++;\r\n            getter(prevVal);\r\n            return prevVal;\r\n        })\r\n    }\r\n    async function addReviewHandler(enteredItemData) {\r\n        const response = await fetch('../api/ReviewHandler', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            subject: enteredItemData.subject,\r\n            body: enteredItemData.body,\r\n            date: enteredItemData.date,\r\n            stars: enteredItemData.stars,\r\n            restaurant: props.restaurant.id,\r\n            user: authCtx.user\r\n          }),\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n    \r\n        const data = await response.json();\r\n        \r\n    }\r\n    const authCtx = useContext(AuthContext);\r\n   \r\n    \r\n    return <div style = {{marginLeft: '8vw', marginRight: '8vw', marginBottom: '10vw'}}>\r\n\r\n        <DetailCard><Image image = {props.restaurant?.image} details = {props.restaurant?.name} subtitle = {props.restaurant?.description}/></DetailCard>\r\n        <DetailCard><Details description = {props.restaurant?.paragraph}/></DetailCard>\r\n        <ItemCard><Menu menu = {props.restaurant?.menu}/></ItemCard>\r\n        <ItemCard><ReviewPage addReviewHandler = {addReviewHandler} reviewList = {props.reviews}/></ItemCard>\r\n        <DetailCard><button onClick = {setter}>clicker</button></DetailCard>\r\n        {authCtx.isOpen && <ModalCart/>}\r\n    </div>\r\n    \r\n}\r\nexport async function getStaticPaths() {\r\n    const client = await MongoClient.connect(\r\n      'mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority'  );\r\n      const db = client.db();\r\n\r\n      const meetupsCollection = db.collection('reviewList');\r\n      console.log(meetupsCollection);\r\n      const meetups = await meetupsCollection.find({}, { restaurant: 1 }).toArray();\r\n   \r\n      client.close();\r\n    \r\n      return {\r\n        fallback: \"blocking\",\r\n        paths: meetups.map((meetup) => ({\r\n          params: { businessId: meetup._id.toString() },\r\n        })),\r\n      };\r\n  }\r\n  \r\n  export async function getStaticProps(context) {\r\n    // fetch data for a single meetup\r\n  \r\n    const meetupId = context.params.businessId;\r\n    console.log('meetupId',typeof meetupId);\r\n    const client = await MongoClient.connect(\r\n      'mongodb+srv://dg21:2x9QUtNjUM3tuL6p@cluster0.nxpoghz.mongodb.net/FoodOrderingSite?retryWrites=true&w=majority'  );\r\n    const db = client.db();\r\n  \r\n    const meetupsCollection = db.collection('reviewList');\r\n    const resCollection = db.collection('ResList');\r\n    const  review = await meetupsCollection.find({\r\n      restaurant: meetupId\r\n    }).toArray();\r\n    const res = await resCollection.findOne({\r\n        _id: ObjectId(meetupId)\r\n    })\r\n\r\n    client.close();\r\n  \r\n    return {\r\n      props: {\r\n        reviews: review.map(r => ({\r\n            user: r.user,\r\n            date: r.date,\r\n            id: r._id.toString(),\r\n            body: r.body,\r\n            subject: r.subject,\r\n            restaurant: r.restaurant,\r\n            stars: r.stars \r\n        })),\r\n        restaurant: {\r\n            name: res.name,\r\n            address: res.address,\r\n            image: res.image,\r\n            id: res._id.toString(),\r\n            description: res.description,\r\n            menu: res.menu,\r\n            paragraph: res.paragraph\r\n        }\r\n      },\r\n      revalidate: 10\r\n    };\r\n  }\r\n\r\n\r\nexport default businessDetails;"]},"metadata":{},"sourceType":"module"}